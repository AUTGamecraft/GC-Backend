# This config requires the following Ubuntu packages to be installed:
# nginx-full php7.2-cgi php7.2-fpm phppgadmin

user nginx;

pid /run/nginx.pid;

# Raise the three following values if you expect a very high load.
worker_processes 4;
worker_rlimit_nofile 1024;
events {
    worker_connections 768;
    multi_accept on;
}

http {
    # Default Ubuntu 13.10 settings.
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include mime.types;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Default Ubuntu 13.10 settings for gzip (uncommented).
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # Group the ContestWebServers to load balance the users' requests
    # on them. The "ip_hash" option is necessary for the notifications
    # to work.
    upstream frontend {
        ip_hash;
        keepalive 500;
        server gc_front:80;
        # Insert other CWSs here.
    }

    # To benefit from kept-alive connections also on AdminWebServer a
    # group for it has to be created as well, even if it will contain
    # just one server.
    upstream backend {
        keepalive 5;
        server app:8000;
    }

    # Force HTTPS.
    server {
        listen 80;
        server_name _;
        location / {
            rewrite ^/(.*)$ https://frontend/$1;
        }
    }

    server {
        listen 443 ssl;
        server_name _;

        # Have the nginx server be the HTTPS endpoint, authenticating
        # and decripting the connection, forwarding plain HTTP requests
        # upstream. To learn how to generate a self-signed certificate
        # see http://wiki.nginx.org/HttpSslModule.
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

        # Serve phppgadmin on a prefix. This assumes that you have the
        # phppgadmin and php7.2-fpm packages properly installed and
        # configured.
        # location /phppgadmin/ {
        #     alias /usr/share/phppgadmin/;
        #     index index.php;

        #     # Protect it with an IP address whitelist.
        #     allow 127.0.0.1;
        #     # Insert other allowed IP addesses or subnets here.
        #     deny all;

        #     # Authentication will be required by phppgadmin, no need to
        #     # enforce it here.

        #     # Serve the static files with a (likely) correct MIME type.
        #     include /etc/nginx/mime.types;
        #     default_type application/octet-stream;

        #     try_files $uri $uri/ =404;

        #     location ~ \.php$ {
        #         fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
        #         fastcgi_index index.php;
        #         include fastcgi_params;
        #     }
        # }

        # Serve API on a prefix.
        location /api/ {
            proxy_pass http://backend/api/;
            include proxy_params;
            proxy_redirect /api/ /api/;
            proxy_redirect http://$host/api /api/;
            proxy_redirect https://$host/api /api/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Protect it with an authentication. For more information
            # see http://wiki.nginx.org/HttpAuthBasicModule.
            # auth_basic "AdminWebServer";
            # auth_basic_user_file /etc/nginx/htpasswd_AWS;

            # Protect it with an IP address whitelist.
            # allow 127.0.0.1;
            # Insert other allowed IP addesses or subnets here.
            # deny all;

            # Allow to upload large files (e.g. testcases).
            client_max_body_size 100M;
        }

        location /staticfiles/ {
            alias /var/www/app/staticfiles/;
            try_files $uri $uri/ =404;
        }

        # Serve Frontend unprefixed.
        location / {
            proxy_pass http://frontend/;
            include proxy_params;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Needs to be as large as the maximum allowed submission
            # and input lengths set in cms.conf.
            client_max_body_size 50M;
        }
    }
}